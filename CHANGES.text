2010-03-04
    Finish off call stack support

2010-03-03
    Allow '0' as any argument in an efun
    Normalise ObjectId filename when initialised with 2 arg constructor

2010-03-01
    Support for virtual function calls

2010-02-28
    Add efuns
    Support field references in block style function literals
    Fix bytecode for |= &= etc
    Support pure virtual functions

2010-02-26
    Add virtual objects
    Add dummy efuns for parser and ed (in plugins)
    Addded support for "%*s" in sscanf
    Fixed preprocessor - it was not being reset between uses

2010-02-22
    Add debug capabilities to generated code
    Implement environment efuns

2010-02-21
    Pass flag to epilog efun (compat with MudOS)
    Allow call-out on string (master instance of file)
    Fix FunctionValue to correctly act as a callable
    Don't recompile if class file is up-to-date

2010-02-20
    Include debug info (file name/line number)
    Include security checks in file efuns
    Track if loading master object so we don't end up in infinite loop of self referential objects.
    Don't do security checks while loading master object
    Support old-style (: function, arg1, arg2, ... :) function pointers
    Add reclaim_objects efun (as no-op)

2010-02-19
    Add additional plugins to root build
    Add eval cost (exec time) checks

2010-01-29
    Config for Dead Souls (DS IIr8)
    Plugin to provide compatability with MudOS/FluffOS for defines/efuns that are not essential

2010-01-27
    Add flag to this_player efun
    virtualp() efun
    Correctly set varargs flag on method parameters
    match_path efun
    {array} | {array} (union)
    {array} & {array} (intersection)
    Support function literals of the form (: some_method :)
    Make function literals correctly reference fields
    Handled catch through synthetic methods

2010-01-25
    Make constant '0' a mixed value, so it can be assigned to a string or object var

2010-01-24
    Use proper path in #line markers
    Compound Expressions
    Cast Expression
    Handle switch statements 
    Access to enclosing methods in function literal

2009-12-24
    Crypt passwords in vision mudlib
    Create crypt efun in separate plugin
    Replace ObjectReference with ObjectId
    Failed build if unit test fails

2009-12-10
    Misc improvements to mudlib
    Provide debug info in plugin builds
    Provide appropriate messages from catch() expression
    Support string + object
    Ability to find object if (and only if) loaded
    Add __DATE__ and __TIME__ macros to preprocessor
    Add trim(str) efun

2009-12-08
    Fixes to build process
    Prompt after saving new user

2009-12-07
    Create distribution of terebi+vision

2009-12-05
    Improve build process

2009-12-03
    Close connection on IOException
    Make sure references are 'dereferenced' before passing as a function argument
    Tests & fixes for sscanf efun

2009-12-02
    Improved logging

2009-12-01
    Support catch expressions

2009-11-16
    Remove lpc2java compiler

2009-10-06
    Initia work on a direct to byte-code compiler

2009-08-27
    Fix plugin for new class support

2009-08-25
    Allow access to inherited fields

2009-08-24
    Fixes for inheritance
    Runtime support for class values

2009-08-23
    Support destruct (from LPC) of connection object

2009-08-22
    Create a parser for literal LPC expressions [for use in restore_object]

2009-08-20
    file size efun
    Support calling simulated efuns
    Move master/sefun objects into ObjectManager rather than system context
    __SAVE_EXTENSION__ should be set by the engine, not the parser
    Fix calling functions with trailing collection (varargs)

2009-08-19
    Include resource finder as a context attachment
    Add output support to Resource class
    Fix JavaCompilerTest to set up context
    Fix ExpressionWriter to output ArgumentSpecs with new parameter order

2009-08-18
    Don't rebuild arguments list every time it is accessed in an efun

2009-08-17
    Attach various configurations to the SystemContext
    Split context into system/thread components
    Don't share contexts (specifically call stacks) across threads

2009-08-16
    Clear call-stack even when re-using same context
    Call create() [with arguments] for new instances (including master instance)

2009-08-15
    Switch order of "vargs" and "semantics" in ArgumentSpec - vargs is a lot more common than references
    Initialise fields with Nil rather than null
    Move "interactive" efun to interactive plugin

2009-08-12
    More work around RuntimeContext

2009-08-11
    Setup call stack before invoking an Apply
    Split RuntimeContext into 2 classes (new class: Context)
    Add a big lock around the context - LPC is designed to be single-threaded

2009-07-30
    Enable destruction of objects
    Join arrays and collections
    Utility for calling applies

2009-07-12
    Support %O and %f in sprintf() efun
    Don't support table mode in sprintf (because the behaviour is bizarre, Dead Souls doesn't use it, and I can't think of a reason why anyone would)
    Support column mode in sprintf() efun

2009-07-11
    Initial support for sprintf efun

2009-07-09
    repeat_string() and replace_string() efuns
    Add 'isNil' support function
    Implode on function (reduce)
    Additional test cases for strings

2009-07-08
    Test cases for strings
    Use constant int values in return value of sizeof/strlen
    Support for efuns: unique_array filter filter_array map_array
    Additional test cases for arrays

2009-07-07
    Test cases for arrays
    Support open-ended ranges on array indexing
    Correctly determine type of array literals.
    Track times for compilation steps

2009-07-06
    Tests for mappings
    Support addition of string + int|float
    Support addition of mapping + mapping
    map_delete() efun
    values() efun
    filter() efun for mappings
    filter_mapping() efun
    map_mapping() efun
    Make map(mapping, ..) synonomous with map_mapping(mapping, ..)
    Support array/string/mapping index of an rvalue.

2009-07-05
    Support running tests from ant
    Include change log
    Support bind() efun
    Expose function pointers on call stack

2009-07-04 
    Add owners to functions
    Add support for evaluate efun
    Additional tests for function values

2009-07-03
    Fix argument access in block function literals
    More function tests
    Tests for function values
    Support for calling function values
    Improved binary operator support
    Better exception handling/hierarchy in compiler/parser
    Better handling of long hex values
    Evaluate $(...) expressions immediately.
    Fix calls to function expressions (was evaluating arguments in the wrong place)

2009-07-02 
    Tests for binary operators
    Correctly handle IO error when looking up source to compile
    Add Binary XOR support
    Switch to testing against public domain version of Dead Souls sefun
    Improved binary operator support

2009-07-01
    Add test for loop contructs
    Add do { } while(..) support

2009-06-30 
    Improved maths support

2009-06-29 
    Working support for runtime instances 
    Additional working efuns

2009-06-22 
    Improved support for LPC class types

2009-06-20 
    Support for class types

2009-06-12 
    Throw compile error for undefined class
    Start attribute support for objects (intended for environment, etc)
    Add new efuns (sort_array, random, inherit_list). Fix passing of refs.
    Better toString() support for preprocessor warnings

2009-06-10 
    Implement member_array efun, and add test for compare_array simul-efun
    Check for unimplemented (or incorrect) efuns
    Fix 'allocate' efun
    Implement 'strsrch' efun
    Implement typeof efun

2009-06-09 
    Better indexing support
    Explode + Implode efuns

