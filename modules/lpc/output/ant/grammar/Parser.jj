/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//**
 * An LPC parser targeted at the MudOS / FluffOS dialect
 * Status: Mostly complete
 *
 * Missing: 
 *          	
 * 
 * Differences from FluffOS : 
 *          Does not parse assignment within logical expression - e.g. "a == 1 && b = atoi(s)"  [ Found 27 occurrences in Dead Souls 2.8.4 ]
 */
 
options 
{
               
                                                 
                         
    STATIC=false;
                      
    JAVA_UNICODE_ESCAPE=true;
}

PARSER_BEGIN(Parser)

package us.terebi.lang.lpc.parser.jj ;
import us.terebi.lang.lpc.parser.ast.*;


import java.util.*;
import java.io.*;
import us.terebi.lang.lpc.parser.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
	private boolean _debug = false;
	private String _printPrefix = "";
	
	public void setDebug(boolean debug)
	{
		this._debug = debug;
	}
	
    /** DEBUG **/
    void jjtreeOpenNodeScope(Node n)
    {
        if( !_debug )
        {
        	return;
        }
        if( (n instanceof ASTStatementBlock) )
        {
            System.out.println(_printPrefix.replace(' ', '-'));
        } 
        System.out.print(_printPrefix);
        System.out.println("+ OPEN SCOPE: " + n ) ;
        // + " [This Token:" + getToken(0) + "; Next Token:" + getToken(1) + "]"); 
        _printPrefix += ((_printPrefix.length() % 6) == 0 ? "| " : "  ");

    }

    void jjtreeCloseNodeScope(Node n)
    {
        if( !_debug ) 
        {
        	return ;
        }

        _printPrefix = _printPrefix.substring(0, _printPrefix.length()-2) ;
        System.out.print(_printPrefix);
        System.out.print("+CLOSE SCOPE: " + n + " [");
        Token t = ((SimpleNode)n).jjtGetFirstToken();
        while( t != null && t != getToken(1) )
        {
        	System.out.print(' ');
        	System.out.print(t.image);
        	t = t.next;
        }
        	System.out.println(" ]");
        
        if( (n instanceof ASTDeclaration) || (n instanceof ASTStatement) )
        {
            System.out.println(_printPrefix.replace(' ', '-'));
        } 
    }
}

PARSER_END(Parser)

SKIP : { " " | "\t" | "\n" | "\r" 
     |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
     |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
     |  <"#" ([" ","\t"])* "line"> : LINE_DIRECTIVE
     }

<LINE_DIRECTIVE> SPECIAL_TOKEN: {
    <LINE_NUMBER : (["0"-"9"])+> 
    {
    	ParserState.getState().getLineMapping().mapLine( matchedToken.beginLine, Integer.parseInt(image.toString().trim())-1);
    }
 |  <FILE_NAME : <STRING_LITERAL> >
    {
    	ParserState.getState().getLineMapping().mapFile( matchedToken.beginLine, image.toString().trim() );
    }
}
<LINE_DIRECTIVE> SKIP: { "\n" : DEFAULT }
<LINE_DIRECTIVE> MORE: {  "\\\n" | "\\\r\n" | < ~[] > }

TOKEN : {
    <INTEGER_LITERAL      : <DECIMAL_LITERAL> | <HEXADECIMAL_LITERAL> | <OCTAL_LITERAL> | <BINARY_LITERAL>  >
 |  <#DECIMAL_LITERAL      : ["0"-"9"] (["0"-"9"])* >
 |  <#HEXADECIMAL_LITERAL  : "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
 |  <#OCTAL_LITERAL        : "0" (["0"-"7"])+ >
 |  <#BINARY_LITERAL       : "0b" (["0","1"])+ >
 |  <FLOAT_LITERAL        : <DECIMAL_LITERAL> "." <DECIMAL_LITERAL> (<EXPONENT>)? | <DECIMAL_LITERAL> <EXPONENT> >
 |  <#EXPONENT             : "e" (["+","-"])? <DECIMAL_LITERAL> >
 |  <CHAR_LITERAL         : "'" ( <SINGLE_CHARACTER> | <ESCAPED_CHARACTER> | "\"" ) "'" >
 |  <STRING_LITERAL       : "\"" ( <SINGLE_CHARACTER> | <ESCAPED_CHARACTER> | "'" )* "\"" >
 |  <#SINGLE_CHARACTER     : (~["\"","\\","\r","\f"]) >
 |  <#ESCAPED_CHARACTER    : "\\" ( ~["0"-"7"] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"] ) >
}

TOKEN : {
    <IF: "if"> 
 |  <ELSE: "else"> 
 |  <WHILE: "while"> 
 |  <DO: "do"> 
 |  <FOR: "for"> 
 |  <FOREACH: "foreach"> 
 |  <IN: "in"> 
 |  <CONTINUE: "continue"> 
 |  <BREAK: "break"> 
 |  <SWITCH: "switch"> 
 |  <CASE: "case">
 |  <DEFLT: "default"> 
 |  <RETURN: "return"> 
 |  <CATCH: "catch"> 
 |  <STATIC: "static"> 
 |  <PUBLIC: "public"> 
 |  <PROTECTED: "protected"> 
 |  <PRIVATE: "private"> 
 |  <NOSAVE: "nosave"> 
 |  <NOMASK: "nomask"> 
 |  <VARARGS: "varargs"> 
 |  <INT: "int" > 
 |  <FLOAT: "float"> 
 |  <STRING: "string"> 
 |  <OBJECT: "object"> 
 |  <MAPPING: "mapping"> 
 |  <ARRAY: "array"> 
 |  <FUNCTION: "function"> 
 |  <BUFFER: "buffer"> 
 |  <MIXED: "mixed"> 
 |  <VOID: "void"> 
 |  <REF: "ref"> 
 |  <INHERIT: "inherit"> 
 |  <CLASS: "class"> 
 |  <EFUN: "efun"> 
}

TOKEN : {
    <SEMI : ";"> 
 |  <COLON : ":"> 
 |  <COMMA : ","> 
 |  <SCOPE : "::"> 
 |  <LEFT_BRACKET : "("> 
 |  <RIGHT_BRACKET : ")"> 
 |  <LEFT_BRACE : "{"> 
 |  <RIGHT_BRACE : "}"> 
 |  <LEFT_INDEX : "["> 
 |  <RIGHT_INDEX : "]"> 
 |  <ASSIGN: "=" > 
 |  <RANGE: ".." > 
 |  <EXPANDO: "..." > 
 |  <CALL_OTHER: "->" > 
 |  <HOOK: "?" > 
 |  <NOT: "!" > 
 |  <EQUAL: "==" > 
 |  <NOT_EQUAL: "!=" > 
 |  <LESS_OR_EQUAL: "<=" > 
 |  <GREATER_OR_EQUAL: ">=" > 
 |  <LESS_THAN: "<" > 
 |  <GREATER_THAN: ">" > 
 |  <LOGICAL_AND: "&&" > 
 |  <LOGICAL_OR: "||" > 
 |  <BINARY_AND: "&" > 
 |  <BINARY_OR: "|" > 
 |  <XOR: "^" > 
 |  <BINARY_NOT: "~" > 
 |  <AND_ASSIGN: "&=" > 
 |  <OR_ASSIGN: "|=" > 
 |  <INCREMENT: "++" > 
 |  <DECREMENT: "--" > 
 |  <PLUS: "+" > 
 |  <MINUS: "-" > 
 |  <STAR: "*" > 
 |  <SLASH: "/" > 
 |  <MODULUS: "%" > 
 |  <PLUS_ASSIGN: "+=" > 
 |  <MINUS_ASSIGN: "-=" > 
 |  <MULTIPLY_ASSIGN: "*=" > 
 |  <DIVIDE_ASSIGN: "/=" > 
 |  <XOR_ASSIGN: "^=" > 
 |  <MODULUS_ASSIGN: "%=" > 
 |  <LEFT_SHIFT: "<<" > 
 |  <RIGHT_SHIFT: ">>" > 
 |  <LEFT_SHIFT_ASSIGN: "<<=" > 
 |  <RIGHT_SHIFT_ASSIGN: ">>=" >
}

TOKEN : {
    <DOLLAR: "$">
 |  <IDENTIFIER: <STD_IDENTIFIER> | <POSN_IDENTIFIER> >
 |  <STD_IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
 |  <POSN_IDENTIFIER: <DOLLAR> ( <DIGIT> )+ >
 |  <#LETTER: ["A"-"Z","_","a"-"z"]>
 |  <#DIGIT: ["0"-"9"]>
}

ASTFile File(): {/*@bgen(jjtree) File */
  ASTFile jjtn000 = new ASTFile(JJTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) File */
    try {
/*@egen*/
    ( Inherit() | Declaration() | <SEMI> /* Unnecessary semi-colon! */ ) *
    <EOF>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Inherit(): {/*@bgen(jjtree) Inherit */
  ASTInherit jjtn000 = new ASTInherit(JJTINHERIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Inherit */
    try {
/*@egen*/
    <INHERIT> SimpleExpression() <SEMI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void Declaration(): {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Declaration */
    try {
/*@egen*/
    Modifiers()
    (
    	Type()
	    (
    	    LOOKAHEAD(3)
        	Fields()
	    |   
	        [ <STAR> ] Method()
	    |   
	        ClassBody()
	    )
	|
		Method()	    
	)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
	
}

void Fields(): {/*@bgen(jjtree) Fields */
  ASTFields jjtn000 = new ASTFields(JJTFIELDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Fields */
    try {
/*@egen*/
    Variable() 
    (
        <COMMA>
        Variable()
    )*
    <SEMI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Variable(): {/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Variable */
    try {
/*@egen*/
    [ <STAR> ] Identifier() 
    (
        <ASSIGN>
        TernaryExpression()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Method(): {/*@bgen(jjtree) Method */
  ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Method */
    try {
/*@egen*/
    Identifier()
    FunctionSignature()
    (
        StatementBlock()
    |
        <SEMI>
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FunctionSignature() : {/*@bgen(jjtree) FunctionSignature */
  ASTFunctionSignature jjtn000 = new ASTFunctionSignature(JJTFUNCTIONSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FunctionSignature */
    try {
/*@egen*/
    <LEFT_BRACKET>
    ParameterDeclarations()
    <RIGHT_BRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Modifiers(): {/*@bgen(jjtree) Modifiers */
  ASTModifiers jjtn000 = new ASTModifiers(JJTMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Modifiers */
    try {
/*@egen*/
    ( <PUBLIC> | <PROTECTED> | <PRIVATE> | <STATIC> | <NOSAVE> | <NOMASK> | <VARARGS> )*/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    ( 
        ( StandardTypeName() | ClassType() )
        [ <ARRAY> ]
    )
    | <VOID>
    | <ARRAY>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void StandardTypeName() : {/*@bgen(jjtree) StandardTypeName */
  ASTStandardTypeName jjtn000 = new ASTStandardTypeName(JJTSTANDARDTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) StandardTypeName */
        try {
/*@egen*/
	( <INT> | <FLOAT> | <STRING> | <MIXED> | <MAPPING> | <OBJECT> | <FUNCTION> | <BUFFER> )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassType() : {/*@bgen(jjtree) ClassType */
  ASTClassType jjtn000 = new ASTClassType(JJTCLASSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassType */
        try {
/*@egen*/
	<CLASS> Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Identifier() : {/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ParameterDeclarations() : {/*@bgen(jjtree) ParameterDeclarations */
  ASTParameterDeclarations jjtn000 = new ASTParameterDeclarations(JJTPARAMETERDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParameterDeclarations */
    try {
/*@egen*/
    [ ParameterDeclaration() ( "," ParameterDeclaration() )* ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ParameterDeclaration() : {/*@bgen(jjtree) ParameterDeclaration */
  ASTParameterDeclaration jjtn000 = new ASTParameterDeclaration(JJTPARAMETERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParameterDeclaration */
    try {
/*@egen*/
    FullType() [ <REF> ] [ Identifier() [ <EXPANDO> ] ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FullType() : {/*@bgen(jjtree) FullType */
  ASTFullType jjtn000 = new ASTFullType(JJTFULLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FullType */
         try {
/*@egen*/
	 Type() [ <STAR> ]/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/
}

void MethodBody()       : {}
{
    StatementBlock()
}

void ClassBody() : {/*@bgen(jjtree) ClassBody */
  ASTClassBody jjtn000 = new ASTClassBody(JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassBody */
        try {
/*@egen*/
	<LEFT_BRACE> ( VariableDeclaration() <SEMI> )* <RIGHT_BRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void StatementBlock() : {/*@bgen(jjtree) StatementBlock */
  ASTStatementBlock jjtn000 = new ASTStatementBlock(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) StatementBlock */
    try {
/*@egen*/
    <LEFT_BRACE>
    ( Statement() )*
    <RIGHT_BRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
        LOOKAHEAD(2) Label() 
    |
    	LOOKAHEAD(2)
        VariableOrExpression() <SEMI>
    |
        StatementBlock()
    |
        ConditionStatement()
    |
        LoopStatement()
    |
        ControlStatement()
    |
        <SEMI>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableOrExpression()       : {}
{
  	LOOKAHEAD(2)
  		Expression()
  	|
  	LOOKAHEAD(2)
  		VariableDeclaration()
}

void Label() : {/*@bgen(jjtree) Label */
  ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Label */
        try {
/*@egen*/
        Identifier() <COLON>
    |
        <CASE> SimpleExpression() [ <RANGE> SimpleExpression() ] <COLON>
    |
        <DEFLT> <COLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ConditionStatement() : {/*@bgen(jjtree) ConditionStatement */
  ASTConditionStatement jjtn000 = new ASTConditionStatement(JJTCONDITIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ConditionStatement */
        try {
/*@egen*/
        <IF> <LEFT_BRACKET> Expression() <RIGHT_BRACKET> Statement() [ LOOKAHEAD(2) <ELSE> Statement() ]
    |
	    <SWITCH> <LEFT_BRACKET> Expression() <RIGHT_BRACKET> Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void LoopStatement() : {/*@bgen(jjtree) LoopStatement */
  ASTLoopStatement jjtn000 = new ASTLoopStatement(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LoopStatement */
        try {
/*@egen*/
        <FOR> <LEFT_BRACKET> [ VariableOrExpression() ] <SEMI> [ Expression() ] <SEMI> [ Expression() ] <RIGHT_BRACKET> Statement() 
    |
        <FOREACH> <LEFT_BRACKET> [ FullType() ] Identifier() [ <COMMA> [ FullType() ] Identifier() ] <IN> Expression() <RIGHT_BRACKET> Statement() 
    |
        <WHILE> <LEFT_BRACKET> Expression() <RIGHT_BRACKET> Statement()
    |
         <DO> Statement() <WHILE> <LEFT_BRACKET> Expression() <RIGHT_BRACKET> <SEMI>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 
}

void ControlStatement() : {/*@bgen(jjtree) ControlStatement */
  ASTControlStatement jjtn000 = new ASTControlStatement(JJTCONTROLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ControlStatement */
        try {
/*@egen*/
        <RETURN> [ Expression() ] <SEMI>
    |
        <CONTINUE> <SEMI>
    |
        <BREAK> <SEMI>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableDeclaration() : {/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaration */
    try {
/*@egen*/
    Type()
    Variable() 
    (
        <COMMA>
        Variable()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Expression()       : {}
{
	SimpleExpression()/*@bgen(jjtree) #CompoundExpression(> 1) */
                           {
                             ASTCompoundExpression jjtn001 = new ASTCompoundExpression(JJTCOMPOUNDEXPRESSION);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
                             jjtn001.jjtSetFirstToken(getToken(1));
                           }
                           try {
/*@egen*/ ( <COMMA> SimpleExpression() )*/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               jjtreeCloseNodeScope(jjtn001);
                               jjtn001.jjtSetLastToken(getToken(0));
                             }
                           }
/*@egen*/                        
}

void SimpleExpression()       : {}
{
    LOOKAHEAD(UnaryExpression() AssignmentOperator())
        AssignmentExpression()
    |
    LOOKAHEAD(3) 
        TernaryExpression()
}

void AssignmentExpression() : {/*@bgen(jjtree) AssignmentExpression */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssignmentExpression */
    try {
/*@egen*/
    UnaryExpression() AssignmentOperator() SimpleExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void AssignmentOperator() : {/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssignmentOperator */
        try {
/*@egen*/
	( <ASSIGN> | <PLUS_ASSIGN> | <MINUS_ASSIGN> | <MULTIPLY_ASSIGN> | <DIVIDE_ASSIGN> | <MODULUS_ASSIGN> 
    | <XOR_ASSIGN> | <AND_ASSIGN> | <OR_ASSIGN> | <LEFT_SHIFT_ASSIGN> | <RIGHT_SHIFT_ASSIGN> )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void TernaryExpression()       : {}
{/*@bgen(jjtree) #TernaryExpression(> 1) */
        {
          ASTTernaryExpression jjtn001 = new ASTTernaryExpression(JJTTERNARYEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( OrExpression() [ Hook() SimpleExpression() Colon() SimpleExpression() ] )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn001);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                       
}

void Hook() : {/*@bgen(jjtree) Hook */
  ASTHook jjtn000 = new ASTHook(JJTHOOK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Hook */
        try {
/*@egen*/
	<HOOK>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Colon() : {/*@bgen(jjtree) Colon */
  ASTColon jjtn000 = new ASTColon(JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Colon */
        try {
/*@egen*/
	<COLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void OrExpression()       : {}
{/*@bgen(jjtree) #LogicalOrExpression(> 1) */
        {
          ASTLogicalOrExpression jjtn001 = new ASTLogicalOrExpression(JJTLOGICALOREXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( AndExpression() ( <LOGICAL_OR> AndExpression() )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn001);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                         
}

void AndExpression()       : {}
{/*@bgen(jjtree) #LogicalAndExpression(> 1) */
        {
          ASTLogicalAndExpression jjtn001 = new ASTLogicalAndExpression(JJTLOGICALANDEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( BinaryOrExpression() ( <LOGICAL_AND> BinaryOrExpression()
	    [ LOOKAHEAD(1) <ASSIGN>
	    {
	    	Token t = getToken(0);
	    	ParseException e = new ParseException("Illegal assignment expression in logical condition at line " + t.beginLine + ", column " + t.beginColumn + "." ); 
	    	e.currentToken = t;
	    	throw e;
	   	}
	   	]
	 )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn001);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                          
}

void BinaryOrExpression()       : {}
{/*@bgen(jjtree) #BinaryOrExpression(> 1) */
        {
          ASTBinaryOrExpression jjtn001 = new ASTBinaryOrExpression(JJTBINARYOREXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( ExclusiveOrExpression() ( <BINARY_OR> ExclusiveOrExpression() )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn001);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                        
}

void ExclusiveOrExpression()       : {}
{/*@bgen(jjtree) #ExclusiveOrExpression(> 1) */
        {
          ASTExclusiveOrExpression jjtn001 = new ASTExclusiveOrExpression(JJTEXCLUSIVEOREXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( BinaryAndExpression() ( <XOR> BinaryAndExpression() )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn001);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                           
}

void BinaryAndExpression()       : {}
{
	EqualityExpression()/*@bgen(jjtree) #BinaryAndExpression(> 1) */
                             {
                               ASTBinaryAndExpression jjtn001 = new ASTBinaryAndExpression(JJTBINARYANDEXPRESSION);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
                             }
                             try {
/*@egen*/ ( <BINARY_AND> EqualityExpression() )*/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                 jjtreeCloseNodeScope(jjtn001);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
                             }
/*@egen*/                         
}

void EqualityExpression()       : {}
{
	ComparisonExpression()/*@bgen(jjtree) #ComparisonExpression(> 1) */
                               {
                                 ASTComparisonExpression jjtn001 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
                                 jjtn001.jjtSetFirstToken(getToken(1));
                               }
                               try {
/*@egen*/ ( EqualityOperator() ComparisonExpression() )*/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                   jjtreeCloseNodeScope(jjtn001);
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
                               }
/*@egen*/                          
}

void EqualityOperator()                     : {/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
     try {
/*@egen*/
     <EQUAL> | <NOT_EQUAL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/
}

void ComparisonExpression()       : {}
{
	ShiftExpression()/*@bgen(jjtree) #ComparisonExpression(> 1) */
                          {
                            ASTComparisonExpression jjtn001 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
                            jjtn001.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ ( ComparisonOperator() ShiftExpression() )*/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                              jjtreeCloseNodeScope(jjtn001);
                              jjtn001.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                          
}

void ComparisonOperator()                     : {/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
    try {
/*@egen*/
    <LESS_THAN> | <LESS_OR_EQUAL> | <GREATER_THAN> | <GREATER_OR_EQUAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ShiftExpression()       : {}
{/*@bgen(jjtree) #ArithmeticExpression(> 1) */
  {
    ASTArithmeticExpression jjtn001 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  ( AdditiveExpression() ( ShiftOperator() AdditiveExpression() )* )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                          
}

void ShiftOperator()                     : {/*@bgen(jjtree) ArithmeticOperator */
  ASTArithmeticOperator jjtn000 = new ASTArithmeticOperator(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOperator */
    try {
/*@egen*/
    <LEFT_SHIFT> | <RIGHT_SHIFT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AdditiveExpression()       : {}
{/*@bgen(jjtree) #ArithmeticExpression(> 1) */
  {
    ASTArithmeticExpression jjtn001 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  ( MultiplicativeExpression() ( AdditiveOperator() MultiplicativeExpression() )* )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                          
}

void AdditiveOperator()                     : {/*@bgen(jjtree) ArithmeticOperator */
  ASTArithmeticOperator jjtn000 = new ASTArithmeticOperator(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOperator */
    try {
/*@egen*/
    <PLUS> | <MINUS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MultiplicativeExpression()       : {}
{
	CastExpression()/*@bgen(jjtree) #ArithmeticExpression(> 1) */
                         {
                           ASTArithmeticExpression jjtn001 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ ( MultiplicativeOperator() CastExpression() )*/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                             jjtreeCloseNodeScope(jjtn001);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/                          
}

void MultiplicativeOperator()                     : {/*@bgen(jjtree) ArithmeticOperator */
  ASTArithmeticOperator jjtn000 = new ASTArithmeticOperator(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOperator */
    try {
/*@egen*/
    <STAR> | <SLASH> | <MODULUS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void CastExpression()      : {}
{
    LOOKAHEAD(<LEFT_BRACKET> FullType() <RIGHT_BRACKET> ) 
        <LEFT_BRACKET> FullType() <RIGHT_BRACKET>/*@bgen(jjtree) #CastExpression( true) */
                                                  {
                                                    ASTCastExpression jjtn001 = new ASTCastExpression(JJTCASTEXPRESSION);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtreeOpenNodeScope(jjtn001);
                                                    jjtn001.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte001;
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      throw (ParseException)jjte001;
                                                    }
                                                    throw (Error)jjte001;
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001,  true);
                                                      jjtreeCloseNodeScope(jjtn001);
                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/                      
    |
    UnaryExpression()
}

void UnaryExpression()       : {}
{
    LOOKAHEAD(3) 
        PostfixExpression() 
    |/*@bgen(jjtree) #UnaryExpression( true) */
    {
      ASTUnaryExpression jjtn001 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (
        <INCREMENT> UnaryExpression() 
    |
        <DECREMENT> UnaryExpression()
    |
        UnaryOperator() CastExpression()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  true);
        jjtreeCloseNodeScope(jjtn001);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                       
}

void UnaryOperator() : {/*@bgen(jjtree) UnaryOperator */
  ASTUnaryOperator jjtn000 = new ASTUnaryOperator(JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UnaryOperator */
        try {
/*@egen*/
	<NOT> | <PLUS> | <MINUS> | <BINARY_NOT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 
}

void PostfixExpression()       : {}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
    {
      ASTPostfixExpression jjtn001 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (
        [ LOOKAHEAD(2) ScopeResolution() ]
        PrimaryExpression() 
        ( 
            IndexPostfix()
        |
            FunctionArguments()
        |
            <CALL_OTHER> Identifier() [ LOOKAHEAD(2) FunctionArguments() ]
        |
           <INCREMENT>
        |
           <DECREMENT>
        )*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn001);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                        
}

void ScopeResolution() : {/*@bgen(jjtree) ScopeResolution */
  ASTScopeResolution jjtn000 = new ASTScopeResolution(JJTSCOPERESOLUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ScopeResolution */
    try {
/*@egen*/
    [ Identifier() | <EFUN> | StandardTypeName() ] <SCOPE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void PrimaryExpression()       : {}
{
	Identifier() 
    |
    LOOKAHEAD(2)
    Literal() 
    |
	<LEFT_BRACKET> 
		(
			<STAR> Identifier() 
		|
		 	Expression()
		)
 	<RIGHT_BRACKET>
	|
	<CATCH> 
	(
		<LEFT_BRACKET> Expression() <RIGHT_BRACKET>
		|
		StatementBlock()
	)
}

void IndexPostfix(): {/*@bgen(jjtree) IndexPostfix */
  ASTIndexPostfix jjtn000 = new ASTIndexPostfix(JJTINDEXPOSTFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IndexPostfix */
    try {
/*@egen*/
    <LEFT_INDEX> IndexExpression() [ <RANGE> [ IndexExpression() ] ] <RIGHT_INDEX>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IndexExpression(): {/*@bgen(jjtree) IndexExpression */
  ASTIndexExpression jjtn000 = new ASTIndexExpression(JJTINDEXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IndexExpression */
        try {
/*@egen*/
	[ <LESS_THAN> ] Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void FunctionArguments() : {/*@bgen(jjtree) FunctionArguments */
  ASTFunctionArguments jjtn000 = new ASTFunctionArguments(JJTFUNCTIONARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FunctionArguments */
    try {
/*@egen*/
    <LEFT_BRACKET> 
    (
        <RIGHT_BRACKET>
        |
        ArgumentExpressionList() [ <COMMA> ] <RIGHT_BRACKET> 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ArgumentExpressionList() : {/*@bgen(jjtree) ArgumentExpressionList */
  ASTArgumentExpressionList jjtn000 = new ASTArgumentExpressionList(JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArgumentExpressionList */
        try {
/*@egen*/
	ArgumentExpression() ( LOOKAHEAD(2) <COMMA> ArgumentExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ArgumentExpression() : {/*@bgen(jjtree) ArgumentExpression */
  ASTArgumentExpression jjtn000 = new ASTArgumentExpression(JJTARGUMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArgumentExpression */
        try {
/*@egen*/
	SimpleExpression() [ <EXPANDO> ]
	|
	<REF> Identifier()
	|
	ClassType()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Literal()       : {}
{
        Constant()
    |
    	<DOLLAR> <LEFT_BRACKET> Identifier() <RIGHT_BRACKET>
    |
    	(   LOOKAHEAD(2)
	        ArrayLiteral()
    	|
      	    LOOKAHEAD(2)
        	MappingLiteral()
	    |
	        LOOKAHEAD(2)
    	    FunctionLiteral()
    	)
}

void Constant() : {/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Constant */
        try {
/*@egen*/
    	<INTEGER_LITERAL>
    |
    	<FLOAT_LITERAL>
    |
    	<CHAR_LITERAL>
    |
    	( <STRING_LITERAL> )+/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ArrayLiteral() : {/*@bgen(jjtree) ArrayLiteral */
  ASTArrayLiteral jjtn000 = new ASTArrayLiteral(JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArrayLiteral */
    try {
/*@egen*/
    <LEFT_BRACKET> <LEFT_BRACE> [ ArrayElement() ( LOOKAHEAD(2) <COMMA> ArrayElement() )* ] [ <COMMA> ] <RIGHT_BRACE> <RIGHT_BRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ArrayElement() : {/*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArrayElement */
        try {
/*@egen*/
	SimpleExpression() [ <EXPANDO> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void MappingLiteral() : {/*@bgen(jjtree) MappingLiteral */
  ASTMappingLiteral jjtn000 = new ASTMappingLiteral(JJTMAPPINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MappingLiteral */
    try {
/*@egen*/
    <LEFT_BRACKET> <LEFT_INDEX> [ MappingElement() ( LOOKAHEAD(2) <COMMA> MappingElement() )* ] [ <COMMA> ] <RIGHT_INDEX> <RIGHT_BRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MappingElement() : {/*@bgen(jjtree) MappingElement */
  ASTMappingElement jjtn000 = new ASTMappingElement(JJTMAPPINGELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MappingElement */
    try {
/*@egen*/
    SimpleExpression() <COLON> SimpleExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FunctionLiteral() : {/*@bgen(jjtree) FunctionLiteral */
  ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FunctionLiteral */
    try {
/*@egen*/
    <LEFT_BRACKET> <COLON> Expression() <COLON> <RIGHT_BRACKET>
    |
    LOOKAHEAD(2)
    <FUNCTION> FunctionSignature() StatementBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


