/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package us.terebi.lang.lpc.parser.jj ;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINE_NUMBER = 8;
  /** RegularExpression Id. */
  int FILE_NAME = 9;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 14;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 15;
  /** RegularExpression Id. */
  int HEXADECIMAL_LITERAL = 16;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 17;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 18;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 19;
  /** RegularExpression Id. */
  int EXPONENT = 20;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 21;
  /** RegularExpression Id. */
  int STRING_LITERAL = 22;
  /** RegularExpression Id. */
  int SINGLE_CHARACTER = 23;
  /** RegularExpression Id. */
  int ESCAPED_CHARACTER = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int DO = 28;
  /** RegularExpression Id. */
  int FOR = 29;
  /** RegularExpression Id. */
  int FOREACH = 30;
  /** RegularExpression Id. */
  int IN = 31;
  /** RegularExpression Id. */
  int CONTINUE = 32;
  /** RegularExpression Id. */
  int BREAK = 33;
  /** RegularExpression Id. */
  int SWITCH = 34;
  /** RegularExpression Id. */
  int CASE = 35;
  /** RegularExpression Id. */
  int DEFLT = 36;
  /** RegularExpression Id. */
  int RETURN = 37;
  /** RegularExpression Id. */
  int CATCH = 38;
  /** RegularExpression Id. */
  int STATIC = 39;
  /** RegularExpression Id. */
  int PUBLIC = 40;
  /** RegularExpression Id. */
  int PROTECTED = 41;
  /** RegularExpression Id. */
  int PRIVATE = 42;
  /** RegularExpression Id. */
  int NOSAVE = 43;
  /** RegularExpression Id. */
  int NOMASK = 44;
  /** RegularExpression Id. */
  int VARARGS = 45;
  /** RegularExpression Id. */
  int INT = 46;
  /** RegularExpression Id. */
  int FLOAT = 47;
  /** RegularExpression Id. */
  int STRING = 48;
  /** RegularExpression Id. */
  int OBJECT = 49;
  /** RegularExpression Id. */
  int MAPPING = 50;
  /** RegularExpression Id. */
  int ARRAY = 51;
  /** RegularExpression Id. */
  int FUNCTION = 52;
  /** RegularExpression Id. */
  int BUFFER = 53;
  /** RegularExpression Id. */
  int MIXED = 54;
  /** RegularExpression Id. */
  int VOID = 55;
  /** RegularExpression Id. */
  int REF = 56;
  /** RegularExpression Id. */
  int INHERIT = 57;
  /** RegularExpression Id. */
  int CLASS = 58;
  /** RegularExpression Id. */
  int EFUN = 59;
  /** RegularExpression Id. */
  int SEMI = 60;
  /** RegularExpression Id. */
  int COLON = 61;
  /** RegularExpression Id. */
  int COMMA = 62;
  /** RegularExpression Id. */
  int SCOPE = 63;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 64;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 65;
  /** RegularExpression Id. */
  int LEFT_BRACE = 66;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 67;
  /** RegularExpression Id. */
  int LEFT_INDEX = 68;
  /** RegularExpression Id. */
  int RIGHT_INDEX = 69;
  /** RegularExpression Id. */
  int ASSIGN = 70;
  /** RegularExpression Id. */
  int RANGE = 71;
  /** RegularExpression Id. */
  int EXPANDO = 72;
  /** RegularExpression Id. */
  int CALL_OTHER = 73;
  /** RegularExpression Id. */
  int HOOK = 74;
  /** RegularExpression Id. */
  int NOT = 75;
  /** RegularExpression Id. */
  int EQUAL = 76;
  /** RegularExpression Id. */
  int NOT_EQUAL = 77;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL = 78;
  /** RegularExpression Id. */
  int GREATER_OR_EQUAL = 79;
  /** RegularExpression Id. */
  int LESS_THAN = 80;
  /** RegularExpression Id. */
  int GREATER_THAN = 81;
  /** RegularExpression Id. */
  int LOGICAL_AND = 82;
  /** RegularExpression Id. */
  int LOGICAL_OR = 83;
  /** RegularExpression Id. */
  int BINARY_AND = 84;
  /** RegularExpression Id. */
  int BINARY_OR = 85;
  /** RegularExpression Id. */
  int XOR = 86;
  /** RegularExpression Id. */
  int BINARY_NOT = 87;
  /** RegularExpression Id. */
  int AND_ASSIGN = 88;
  /** RegularExpression Id. */
  int OR_ASSIGN = 89;
  /** RegularExpression Id. */
  int INCREMENT = 90;
  /** RegularExpression Id. */
  int DECREMENT = 91;
  /** RegularExpression Id. */
  int PLUS = 92;
  /** RegularExpression Id. */
  int MINUS = 93;
  /** RegularExpression Id. */
  int STAR = 94;
  /** RegularExpression Id. */
  int SLASH = 95;
  /** RegularExpression Id. */
  int MODULUS = 96;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 97;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 98;
  /** RegularExpression Id. */
  int MULTIPLY_ASSIGN = 99;
  /** RegularExpression Id. */
  int DIVIDE_ASSIGN = 100;
  /** RegularExpression Id. */
  int XOR_ASSIGN = 101;
  /** RegularExpression Id. */
  int MODULUS_ASSIGN = 102;
  /** RegularExpression Id. */
  int LEFT_SHIFT = 103;
  /** RegularExpression Id. */
  int RIGHT_SHIFT = 104;
  /** RegularExpression Id. */
  int LEFT_SHIFT_ASSIGN = 105;
  /** RegularExpression Id. */
  int RIGHT_SHIFT_ASSIGN = 106;
  /** RegularExpression Id. */
  int DOLLAR = 107;
  /** RegularExpression Id. */
  int IDENTIFIER = 108;
  /** RegularExpression Id. */
  int STD_IDENTIFIER = 109;
  /** RegularExpression Id. */
  int POSN_IDENTIFIER = 110;
  /** RegularExpression Id. */
  int LETTER = 111;
  /** RegularExpression Id. */
  int DIGIT = 112;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int LINE_DIRECTIVE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<token of kind 7>",
    "<LINE_NUMBER>",
    "<FILE_NAME>",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 13>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEXADECIMAL_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOAT_LITERAL>",
    "<EXPONENT>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<SINGLE_CHARACTER>",
    "<ESCAPED_CHARACTER>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"foreach\"",
    "\"in\"",
    "\"continue\"",
    "\"break\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"return\"",
    "\"catch\"",
    "\"static\"",
    "\"public\"",
    "\"protected\"",
    "\"private\"",
    "\"nosave\"",
    "\"nomask\"",
    "\"varargs\"",
    "\"int\"",
    "\"float\"",
    "\"string\"",
    "\"object\"",
    "\"mapping\"",
    "\"array\"",
    "\"function\"",
    "\"buffer\"",
    "\"mixed\"",
    "\"void\"",
    "\"ref\"",
    "\"inherit\"",
    "\"class\"",
    "\"efun\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\"::\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\"..\"",
    "\"...\"",
    "\"->\"",
    "\"?\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "\"&&\"",
    "\"||\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"&=\"",
    "\"|=\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"$\"",
    "<IDENTIFIER>",
    "<STD_IDENTIFIER>",
    "<POSN_IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
