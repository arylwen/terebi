/* ------------------------------------------------------------------------
 * $Id$
 * Copyright 2009 Tim Vernum
 * ------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ------------------------------------------------------------------------
 */

package us.terebi.lang.lpc.compiler.java;

import java.io.Closeable;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import us.terebi.lang.lpc.compiler.CompileException;
import us.terebi.lang.lpc.compiler.Compiler;
import us.terebi.lang.lpc.compiler.CompilerObjectManager;
import us.terebi.lang.lpc.compiler.ObjectOutput;
import us.terebi.lang.lpc.compiler.ObjectSource;
import us.terebi.lang.lpc.compiler.java.context.CompileContext;
import us.terebi.lang.lpc.parser.ast.ASTClassBody;
import us.terebi.lang.lpc.parser.ast.ASTDeclaration;
import us.terebi.lang.lpc.parser.ast.ASTFields;
import us.terebi.lang.lpc.parser.ast.ASTMethod;
import us.terebi.lang.lpc.parser.ast.ASTObjectDefinition;
import us.terebi.lang.lpc.parser.ast.ASTUtil;
import us.terebi.lang.lpc.parser.ast.BaseASTVisitor;
import us.terebi.lang.lpc.runtime.ObjectInstance;
import us.terebi.lang.lpc.runtime.jvm.context.Efuns;

/**
 * 
 */
public class JavaCompiler implements Compiler
{
    private final Efuns _efuns;
    private final CompilerObjectManager _manager;

    public JavaCompiler(Efuns efuns, CompilerObjectManager manager)
    {
        _efuns = efuns;
        _manager = manager;
    }

    public void compile(ObjectSource source, ObjectOutput output) throws IOException
    {
        CompileContext context = new CompileContext(new PrintWriter(output.open()), _manager);
        context.functions().addEfuns(_efuns);
        ObjectInstance sefun = _manager.getSimulatedEfunObject();
        if (sefun != null)
        {
            context.functions().addSimulEfuns(sefun.getDefinition().getMethods().values());
        }
        try
        {
            writePackage(output, context);
            writeImports(context);
            writeJavaDoc(context, source);
            writeClass(output.getClassName(), context, source);
        }
        finally
        {
            close(context);
        }
    }

    private void writeImports(CompileContext context)
    {
        PrintWriter writer = context.writer();
        writer.println("import java.util.*;");
        writer.println("import us.terebi.lang.lpc.runtime.*;");
        writer.println("import us.terebi.lang.lpc.runtime.jvm.*;");
        writer.println("import us.terebi.lang.lpc.runtime.jvm.support.*;");
    }

    private void writeClass(String className, CompileContext context, ObjectSource source)
    {
        context.writer().print("public class ");
        context.writer().print(className);
        context.writer().println(" extends LpcObject {");
        context.variables().pushScope();
        ASTObjectDefinition ast = source.getSyntaxTree();
        context.writer().println("/* Inheritance */");
        ast.childrenAccept(new InheritanceWriter(context), null);
        context.writer().println("/* Members */");
        writeMembers(ast, context);
        context.variables().popScope();
        context.writer().println("}");
    }

    private void writeMembers(ASTObjectDefinition ast, final CompileContext context)
    {
        final FieldWriter fieldWriter = new FieldWriter(context);
        final ClassWriter classWriter = new ClassWriter(context);
        final MethodWriter methodWriter = new MethodWriter(context);

        ast.childrenAccept(new BaseASTVisitor()
        {
            public Object visit(ASTDeclaration node, Object data)
            {
                if (ASTUtil.hasChildType(ASTFields.class, node))
                {
                    return fieldWriter.visit(node, data);
                }
                if (ASTUtil.hasChildType(ASTClassBody.class, node))
                {
                    return classWriter.visit(node, data);
                }
                if (ASTUtil.hasChildType(ASTMethod.class, node))
                {
                    return methodWriter.visit(node, data);
                }
                throw new CompileException(node, "Internal Error - Unknown declaration type");
            }
        }, null);
    }

    private void writeJavaDoc(CompileContext context, ObjectSource source)
    {
        context.writer().print("/** Automatically generated by ");
        context.writer().print(getClass().getName());
        context.writer().print(" at ");
        context.writer().print(new Date());
        context.writer().print(" for ");
        context.writer().print(source.getFilename());
        context.writer().println(" */");
    }

    private void writePackage(ObjectOutput output, CompileContext context)
    {
        context.writer().print("package ");
        context.writer().print(output.getPackageName());
        context.writer().println(";");
    }

    private void close(Closeable close)
    {
        try
        {
            close.close();
        }
        catch (IOException e)
        {
            // Ignore
        }
    }
}
