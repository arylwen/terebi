/* ------------------------------------------------------------------------
 * $Id$
 * Copyright 2009 Tim Vernum
 * ------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ------------------------------------------------------------------------
 */

package us.terebi.lang.lpc.compiler.java;

import java.io.Closeable;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import us.terebi.lang.lpc.compiler.Compiler;
import us.terebi.lang.lpc.compiler.ObjectOutput;
import us.terebi.lang.lpc.compiler.ObjectSource;
import us.terebi.lang.lpc.compiler.java.context.CompileContext;
import us.terebi.lang.lpc.compiler.java.context.FunctionMap;
import us.terebi.lang.lpc.compiler.java.context.ObjectManager;

/**
 * 
 */
public class JavaCompiler implements Compiler
{
    private final FunctionMap _efuns;
    private final ObjectManager _manager;

    public JavaCompiler(FunctionMap efuns, ObjectManager manager)
    {
        _efuns = efuns;
        _manager = manager;
    }

    public void compile(ObjectSource source, ObjectOutput output) throws IOException
    {
        CompileContext context = new CompileContext(new PrintWriter(output.open()), _manager);
        context.functions().addEfuns(_efuns);
        try
        {
            writePackage(output, context);
            writeImports(context);
            writeJavaDoc(context, source);
            writeClass(output.getClassName(), context, source);
        }
        finally
        {
            close(context);
        }
    }

    private void writeImports(CompileContext context)
    {
        PrintWriter writer = context.writer();
        writer.println("import java.util.*;");
        writer.println("import us.terebi.lang.lpc.runtime.*;");
        writer.println("import us.terebi.lang.lpc.runtime.jvm.*;");
        writer.println("import us.terebi.lang.lpc.runtime.jvm.support.*;");
    }

    private void writeClass(String className, CompileContext context, ObjectSource source)
    {
        context.writer().print("public class ");
        context.writer().print(className);
        context.writer().println(" extends LpcObject {");
        context.variables().pushScope();
        source.getSyntaxTree().childrenAccept(new InheritanceWriter(context), null);
        source.getSyntaxTree().childrenAccept(new FieldWriter(context), null);
        source.getSyntaxTree().childrenAccept(new MethodWriter(context), null);
        context.variables().popScope();
        context.writer().println("}");
    }

    private void writeJavaDoc(CompileContext context, ObjectSource source)
    {
        context.writer().print("/** Automatically generated by ");
        context.writer().print(getClass().getName());
        context.writer().print(" at ");
        context.writer().print(new Date());
        context.writer().print(" for ");
        context.writer().print(source.getFilename());
        context.writer().println(" */");
    }

    private void writePackage(ObjectOutput output, CompileContext context)
    {
        context.writer().print("package ");
        context.writer().print(output.getPackageName());
        context.writer().println(";");
    }

    private void close(Closeable close)
    {
        try
        {
            close.close();
        }
        catch (IOException e)
        {
            // Ignore
        }
    }
}
